(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))

(define (make-segment start end) (cons start end))
(define (start-segment s) (car s))
(define (end-segment s) (cdr s))

(define (midpoint-segment s)
  (let ((start (start-segment s))
        (end (end-segment s)))
    (make-point (/ (+ (x-point start) (x-point end)) 2)
                (/ (+ (y-point start) (y-point end)) 2))))


(define (make-rectangle-1 start end) (cons start end))
(define (start-rectangle-1 r) (car r))
(define (end-rectangle-1 r) (cdr r))
(define (width-rectangle-1 r)
  (let ((start-rectangle-1 r)
        (end-rectangle-1 r))
  (abs (- (x-point start) (x-point end)))))
(define (height-rectangle-1 r)
  (let ((start-rectangle-1 r)
        (end-rectangle-1 r))
  (abs (- (y-point start) (y-point end)))))
(define (perimeter-rectangle-1 r)
  (* (+ (width-rectangle-1 r) (height-rectangle-1 r)) 2))
(define (area-rectangle-1 r)
  (* (width-rectangle-1 r) (height-rectangle-1 r)))

(define (make-rectangle-2 width height) (cons width height))
(define (width-rectangle-2 r) (car r))
(define (height-rectangle-2 r) (cdr r))
(define (perimeter-rectangle-2 r)
  (* (+ (width-rectangle-2 r) (height-rectangle-2 r)) 2))
(define (area-rectangle-2 r)
  (* (width-rectangle-2 r) (height-rectangle-2 r)))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(define (print-segment p)
  (print-point (start-segment p))
  (print-point (end-segment p)))

(print-point (make-point 1 2))
(print-segment (make-segment (make-point 3 4) (make-point 1 2)))
(print-point (midpoint-segment (make-segment (make-point 3 4) (make-point 1 2))))
